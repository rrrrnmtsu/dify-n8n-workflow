services:
  # PostgreSQL Database (Dify用)
  postgres:
    image: postgres:15-alpine
    container_name: dify-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-dify}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dify_password}
      POSTGRES_DB: ${POSTGRES_DB:-dify}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dify_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dify}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Dify用)
  redis:
    image: redis:7-alpine
    container_name: dify-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    networks:
      - dify_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dify API Server
  dify-api:
    image: langgenius/dify-api:latest
    container_name: dify-api
    environment:
      # Database
      DB_USERNAME: ${POSTGRES_USER:-dify}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-dify_password}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${POSTGRES_DB:-dify}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}

      # Application
      SECRET_KEY: ${DIFY_SECRET_KEY:-your-secret-key-here}
      MODE: ${DIFY_MODE:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Storage Configuration
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      STORAGE_LOCAL_PATH: ${STORAGE_LOCAL_PATH:-/app/api/storage}

      # Plugin Configuration
      PLUGIN_ENABLED: ${PLUGIN_ENABLED:-false}

      # API Configuration
      API_URL: ${DIFY_API_URL:-http://localhost:5001}
      CONSOLE_URL: ${DIFY_CONSOLE_URL:-http://localhost:3000}

      # CORS Configuration
      CONSOLE_CORS_ALLOW_ORIGINS: "*"
      WEB_API_CORS_ALLOW_ORIGINS: "*"

    ports:
      - "${DIFY_API_PORT:-5001}:5001"
    volumes:
      - dify_api_data:/app/api/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dify_network
      - workflow_network

  # Dify Web Console
  dify-web:
    image: langgenius/dify-web:latest
    container_name: dify-web
    environment:
      # API URLs (must use localhost for browser access)
      CONSOLE_API_URL: http://localhost:5001
      APP_API_URL: http://localhost:5001
      NEXT_PUBLIC_API_PREFIX: http://localhost:5001
      NEXT_PUBLIC_PUBLIC_API_PREFIX: http://localhost:5001
    ports:
      - "${DIFY_WEB_PORT:-3000}:3000"
    depends_on:
      - dify-api
    networks:
      - dify_network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      # Database
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-dify}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-dify_password}

      # n8n Configuration
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin_password}

      # Webhook Configuration (optional for production)
      # WEBHOOK_URL: ${N8N_WEBHOOK_URL:-http://localhost:5678}
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}

      # Allow Telegram polling mode (bypass HTTPS requirement for local dev)
      N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN: "true"

      # Execution Configuration
      EXECUTIONS_MODE: ${N8N_EXECUTIONS_MODE:-regular}
      EXECUTIONS_TIMEOUT: ${N8N_EXECUTIONS_TIMEOUT:-300}
      EXECUTIONS_TIMEOUT_MAX: ${N8N_EXECUTIONS_TIMEOUT_MAX:-3600}

      # Timezone
      GENERIC_TIMEZONE: ${TIMEZONE:-Asia/Tokyo}
      TZ: ${TIMEZONE:-Asia/Tokyo}

    ports:
      - "${N8N_PORT:-5678}:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/workflows
      - ./shared:/shared
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dify_network
      - workflow_network

networks:
  dify_network:
    driver: bridge
  workflow_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  dify_api_data:
  n8n_data:
